// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ims.Data.Context;

#nullable disable

namespace ims.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ims.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("ims.Data.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Module", "Operation")
                        .IsUnique()
                        .HasFilter("[Module] IS NOT NULL AND [Operation] IS NOT NULL");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(2493),
                            Module = "User",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(4057),
                            Module = "User",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(4770),
                            Module = "User",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(4829),
                            Module = "User",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5244),
                            Module = "Role",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5289),
                            Module = "Role",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5304),
                            Module = "Role",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5319),
                            Module = "Role",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5392),
                            Module = "Stock",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5408),
                            Module = "Stock",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5422),
                            Module = "Stock",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5435),
                            Module = "Stock",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5546),
                            Module = "Report",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5563),
                            Module = "Report",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5577),
                            Module = "Report",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5590),
                            Module = "Report",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5618),
                            Module = "Product",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5632),
                            Module = "Product",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5646),
                            Module = "Product",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5659),
                            Module = "Product",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5686),
                            Module = "Transaction",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5700),
                            Module = "Transaction",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5713),
                            Module = "Transaction",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5727),
                            Module = "Transaction",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5829),
                            Module = "Store",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5855),
                            Module = "Store",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5878),
                            Module = "Store",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5902),
                            Module = "Store",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5955),
                            Module = "Category",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5970),
                            Module = "Category",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5983),
                            Module = "Category",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(5997),
                            Module = "Category",
                            Operation = "DELETE"
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(6023),
                            Module = "UnitOfMesure",
                            Operation = "VIEW"
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(6038),
                            Module = "UnitOfMesure",
                            Operation = "CREATE"
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(6051),
                            Module = "UnitOfMesure",
                            Operation = "UPDATE"
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 946, DateTimeKind.Local).AddTicks(6073),
                            Module = "UnitOfMesure",
                            Operation = "DELETE"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "EX01",
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(8021),
                            Price = 1m,
                            ProductName = "Example Product",
                            UnitOfMeasureId = 1
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 909, DateTimeKind.Local).AddTicks(439),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 910, DateTimeKind.Local).AddTicks(9714),
                            RoleName = "Accountant"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 910, DateTimeKind.Local).AddTicks(9733),
                            RoleName = "Driver"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 27
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 34
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 35
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 36
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Store", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7924),
                            StoreCode = "EX01",
                            StoreName = "Example Store"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.StoreStock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("StoreStock", (string)null);
                });

            modelBuilder.Entity("ims.Data.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("ToStoreId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("ToStoreId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("ims.Data.Entity.TransactionDetail", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TransactionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("TransactionDetail", (string)null);
                });

            modelBuilder.Entity("ims.Data.Entity.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7717),
                            TransactionTypeName = "Stock Receipt"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7719),
                            TransactionTypeName = "Stock Out"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7721),
                            TransactionTypeName = "Transfer"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Isocode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("UnitOfMeasureName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7820),
                            Isocode = "pc",
                            UnitOfMeasureName = "Piece"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7828),
                            Isocode = "kg",
                            UnitOfMeasureName = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 43, 388, DateTimeKind.Local).AddTicks(7833),
                            Isocode = "m",
                            UnitOfMeasureName = "Meter"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 3, 15, 14, 7, 42, 948, DateTimeKind.Local).AddTicks(8111),
                            Password = "1b2ebfa84ad4d06eed294bc9b79c51cbab7c1e203a39b86395d4f5ac28807a00",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ims.Data.Entity.Product", b =>
                {
                    b.HasOne("ims.Data.Entity.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ims.Data.Entity.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Product")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ims.Data.Entity.RolePermission", b =>
                {
                    b.HasOne("ims.Data.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ims.Data.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ims.Data.Entity.StoreStock", b =>
                {
                    b.HasOne("ims.Data.Entity.Product", "Product")
                        .WithMany("StoreStock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ims.Data.Entity.Store", "Store")
                        .WithMany("StoreStock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ims.Data.Entity.Transaction", b =>
                {
                    b.HasOne("ims.Data.Entity.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ims.Data.Entity.Store", "ToStore")
                        .WithMany()
                        .HasForeignKey("ToStoreId");

                    b.HasOne("ims.Data.Entity.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("ToStore");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("ims.Data.Entity.TransactionDetail", b =>
                {
                    b.HasOne("ims.Data.Entity.Product", "Product")
                        .WithMany("TransactionDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ims.Data.Entity.Transaction", "Transaction")
                        .WithMany("TransactionDetail")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ims.Data.Entity.UserRole", b =>
                {
                    b.HasOne("ims.Data.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ims.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ims.Data.Entity.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("ims.Data.Entity.Product", b =>
                {
                    b.Navigation("StoreStock");

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("ims.Data.Entity.Store", b =>
                {
                    b.Navigation("StoreStock");
                });

            modelBuilder.Entity("ims.Data.Entity.Transaction", b =>
                {
                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("ims.Data.Entity.UnitOfMeasure", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
